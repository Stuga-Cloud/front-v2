generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  lambdas            Lambda[]
  createdProjects    Project[]
  projectsMembership ProjectMembership[]
  sessions           Session[]
}

model Project {
  id         String              @id @default(cuid())
  name       String
  createdBy  String
  containers Container[]         @relation("ProjectContainers")
  databases  Database[]          @relation("ProjectDatabases")
  lambdas    Lambda[]
  user       User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  members    ProjectMembership[]
  registry   Registry?

  @@index([createdBy])
}

model ProjectMembership {
  projectId   String
  userId      String
  hasAccepted Boolean @default(false)
  project     Project @relation(fields: [projectId], references: [id])
  user        User    @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model Registry {
  id         String              @id @default(cuid())
  projectId  String              @unique
  project    Project             @relation(fields: [projectId], references: [id])
  namespaces RegistryNamespace[]
}

model RegistryNamespace {
  id         String   @id @default(cuid())
  name       String
  state      String
  modifiedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  registryId String
  registry   Registry @relation(fields: [registryId], references: [id])
}

model Database {
  id        String  @id @default(cuid())
  name      String  @unique
  projectId String
  project   Project @relation("ProjectDatabases", fields: [projectId], references: [id])

  @@index([projectId])
}

model Container {
  id         String   @id @default(cuid())
  name       String   @unique
  modifiedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  projectId  String
  project    Project  @relation("ProjectContainers", fields: [projectId], references: [id])

  @@index([projectId])
}

model Lambda {
  id             String   @id @default(cuid())
  name           String
  imageName      String
  cpuLimitmCPU   Int
  memoryLimitMB  Int
  minInstances   Int
  maxInstances   Int
  envVars        Json[]
  timeoutSeconds Int
  visibility     String
  privateConfig  Json?
  modifiedAt     DateTime @default(now())
  createdAt      DateTime @default(now())
  projectId      String
  createdBy      String
  user           User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  project        Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([createdBy])
}
