// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  projectsMembership ProjectMembership[]
  createdProjects    Project[]
}

model Project {
  id        String              @id @default(cuid())
  name      String
  createdBy String
  members     ProjectMembership[]
  registry  Registry?

  user                User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  databases           Database[]  @relation("ProjectDatabases")

  @@index([createdBy])
}

model ProjectMembership {
  projectId   String
  userId      String
  hasAccepted Boolean @default(false)

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model Registry {
  id         String @id @default(cuid())
  projectId  String @unique
  namespaces RegistryNamespace[]

  project Project @relation(fields: [projectId], references: [id])
}

model RegistryNamespace {
  id          String   @id @default(cuid())
  name        String
  state       String
  modifiedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  registryId  String

  registry Registry @relation(fields: [registryId], references: [id])
}


model Database {
  id          String    @id @default(cuid())
  name        String    @unique
  projectId   String
  createdAt   DateTime @default(now())
  project     Project   @relation("ProjectDatabases", fields: [projectId], references: [id])

  @@index([projectId])
}
